1. socket
2. bind
3. listen
4. accept/5. select
6. recv
7. send
8. close


socket: Create a new socket.
bind: Bind the socket to a specific address and port (typically used by the server).
listen: Set the socket to listen for incoming connection requests (server-side).
accept: Accept an incoming connection request and create a new socket for the connection (server-side).
select: (Optional) Use to monitor multiple sockets for read/write activity (usually for advanced scenarios, such as handling multiple clients).
recv: Receive data from a connected socket (both client and server).
send: Send data to a connected socket (both client and server).
close: Close the socket when done.

The somaxconn value sets the maximum number of connections that can be queued, and it affects all listening sockets.
To find its value in your system, use:
    cat /proc/sys/net/core/somaxconn

The select function in C is used for monitoring multiple file descriptors to see if they are ready for I/O operations (such as reading or writing) or if there are any exceptional conditions pending. This allows you to perform non-blocking I/O and manage multiple connections in a single thread.
    int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

nfds: The highest-numbered file descriptor plus one. This is used to specify the range of file descriptors to be checked. It is usually set to the highest file descriptor value in the fd_set plus one.

readfds: A pointer to an fd_set structure that specifies the file descriptors to be checked for readability.

writefds: A pointer to an fd_set structure that specifies the file descriptors to be checked for writability.

exceptfds: A pointer to an fd_set structure that specifies the file descriptors to be checked for exceptional conditions.

timeout: A pointer to a struct timeval that specifies the maximum amount of time to wait for an event. If NULL, select will block indefinitely until an event occurs.

Key Functions for select

    FD_ZERO(fd_set *set):
        Clears the file descriptor set set. This initializes the set to be empty.
        FD_ZERO(&my_fd_set);

    FD_SET(int fd, fd_set *set):
        Adds the file descriptor fd to the set set. This indicates that you want to monitor fd for the conditions specified (readability, writability, or exceptions).
        FD_SET(my_socket, &my_fd_set);

    FD_CLR(int fd, fd_set *set):
        Removes the file descriptor fd from the set set. This indicates that you no longer want to monitor fd.
        FD_CLR(my_socket, &my_fd_set);

    FD_ISSET(int fd, fd_set *set):
        Checks if the file descriptor fd is part of the set set. This is typically used after select returns to determine if a particular file descriptor is ready for the specified condition.
        if (FD_ISSET(my_socket, &my_fd_set)) {
            // my_socket is ready for reading/writing
        }

The fd_set and related macros/functions are part of the POSIX standard for managing file descriptors in I/O multiplexing, particularly with the select system call. Here's a detailed explanation of each:

1. FD_ZERO
Purpose:

Initializes a file descriptor set to be empty. This means all file descriptors are initially excluded from the set.
Usage:
FD_ZERO(&set);
&set is a pointer to an fd_set structure.
After calling FD_ZERO, the file descriptor set set will be empty, meaning it contains no file descriptors.

2. FD_SET
Purpose:

Adds a file descriptor to the file descriptor set. This indicates that you want to monitor this file descriptor for events.
Usage:
FD_SET(fd, &set);
fd is the file descriptor you want to add to the set.
&set is a pointer to an fd_set structure that will be modified to include fd.
Example:
FD_SET(STDIN_FILENO, &readfds); // Add stdin (fd 0) to the readfds set

3. FD_CLR
Purpose:

Removes a file descriptor from the file descriptor set. This means you no longer want to monitor this file descriptor for events.
Usage:
FD_CLR(fd, &set);
fd is the file descriptor you want to remove.
&set is a pointer to an fd_set structure that will be modified to exclude fd.
Example:
FD_CLR(STDIN_FILENO, &readfds); // Remove stdin (fd 0) from the readfds set

4. FD_ISSET
Purpose:

Checks if a file descriptor is part of the file descriptor set. This is used after a call to select to determine if a file descriptor is ready for the specified operation (read, write, etc.).
Usage:
if (FD_ISSET(fd, &set)) {
    // fd is part of the set
}
fd is the file descriptor to check.
&set is a pointer to an fd_set structure to be checked.
Example:
if (FD_ISSET(STDIN_FILENO, &readfds)) {
    // stdin (fd 0) is ready for reading
}

Example Workflow
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/select.h>

int main() {
    fd_set readfds;
    int retval;

    // Initialize the file descriptor set
    FD_ZERO(&readfds);
    
    // Add stdin to the set
    FD_SET(STDIN_FILENO, &readfds);
    
    // Set the timeout for select
    struct timeval timeout;
    timeout.tv_sec = 5;  // 5 seconds
    timeout.tv_usec = 0; // 0 microseconds

    // Call select
    retval = select(STDIN_FILENO + 1, &readfds, NULL, NULL, &timeout);

    if (retval == -1) {
        perror("select error");
        exit(1);
    } else if (retval) {
        // Check if stdin is ready for reading
        if (FD_ISSET(STDIN_FILENO, &readfds)) {
            printf("stdin is ready for reading\n");
        }
    } else {
        printf("No data within 5 seconds.\n");
    }

    return 0;
}



https://www.youtube.com/watch?v=CfEShMmsUus

https://www.youtube.com/watch?v=Y6pFtgRdUts


Using select()
select() allows you to monitor multiple file descriptors to see if they are ready for reading, writing, or if there are exceptional conditions. When you call select(), you specify a set of file descriptors and select() will block until at least one of these descriptors becomes ready or a timeout occurs.

Here’s how it fits into the picture:

Setting Up: Before calling select(), you initialize a set of file descriptors and add the ones you want to monitor.
Calling select(): When select() returns, it modifies the file descriptor sets to indicate which descriptors are ready for the requested operation (e.g., reading).
Checking the Results: After select() returns, you can check which file descriptors are set to see which ones are ready. You can then safely call recv() or send() on these descriptors without blocking, because select() has already informed you that they are ready for the operation.

https://github.com/artygo8/examRank06/blob/main/mini_serv.c

Blocking based on the select call:

If you don't specify &read_fds, &write_fds, or &except_fds when calling select, the behavior of select will be affected based on which sets you provide. Here's how select behaves depending on the sets you include or exclude:
Behavior of select Based on Provided Sets

Specifying All Three Sets:
If you provide &read_fds, &write_fds, and &except_fds to select, it will monitor all specified file descriptors for the conditions specified in each set.
select will block until at least one file descriptor in any of these sets becomes ready.
    fd_set read_fds, write_fds, except_fds;
    // Initialize fd_set variables and add file descriptors
    int result = select(max_fd + 1, &read_fds, &write_fds, &except_fds, NULL);
Specifying Only read_fds:
If you only specify &read_fds and pass NULL for write_fds and except_fds, select will only check for readability. It will block until one or more of the file descriptors in read_fds is ready for reading.
In this case, select will not be concerned with file descriptors ready for writing or exceptional conditions.
    fd_set read_fds;
    // Initialize read_fds and add file descriptors
    int result = select(max_fd + 1, &read_fds, NULL, NULL, NULL);
Specifying Only write_fds:
If you only specify &write_fds and pass NULL for read_fds and except_fds, select will only check for writability. It will block until one or more of the file descriptors in write_fds is ready for writing.
    fd_set write_fds;
    // Initialize write_fds and add file descriptors
    int result = select(max_fd + 1, NULL, &write_fds, NULL, NULL);
Specifying NULL for All Sets:
If you pass NULL for read_fds, write_fds, and except_fds, select will block indefinitely because there are no file descriptors to monitor. This is not a typical usage since it essentially makes select wait for any activity on file descriptors, which is effectively useless because no sets are provided for monitoring.
    int result = select(0, NULL, NULL, NULL, NULL);

Summary
Blocking for Readiness:

If you specify &read_fds and NULL for write_fds and except_fds, select will block until there is data available to read on one of the file descriptors in read_fds.
Blocking for Writing:
If you specify &write_fds and NULL for read_fds and except_fds, select will block until one of the file descriptors in write_fds is ready to be written to.
Blocking for Exceptions:
If you specify &except_fds and NULL for read_fds and write_fds, select will block until one of the file descriptors in except_fds has an exceptional condition.
Blocking Indefinitely:
If you pass NULL for all sets, select will not function properly and will block indefinitely without monitoring any file descriptors.
In practice, you usually specify the sets that are relevant to your application’s needs. For a chat server, you typically focus on read_fds to handle incoming messages and may use write_fds if you need to handle non-blocking writes.

EAGAIN:
Non-Blocking Mode: If your socket is non-blocking and can't complete an operation, you’ll get EAGAIN.
Use select: Instead of checking for EAGAIN yourself, use select to see when the socket is ready for reading or writing.
Simplifies Handling: select simplifies your code by handling the readiness of the file descriptor, so you don’t need to worry about EAGAIN directly.
In summary, EAGAIN is an error indicating a non-blocking operation can’t proceed right now. You handle this efficiently using select, which tells you when your socket or file is ready for operations, so you don’t need to handle EAGAIN directly in your code.




